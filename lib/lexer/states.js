// @ts-nocheck
'use strict';
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const lexer_state_1 = __importDefault(require("./lexer-state"));
/**
 * @return {Object}  all states in which the lexer can be with their associated transitions.
 */
function makeStates() {
    return {
        base: new lexer_state_1.default()
            .addTransition('EscapedCharacter', null, true)
            .addTransition('Comment', null, true)
            .addTransition('Hashtag', null, true)
            .addTransition('BeginCommand', 'command', true)
            .addTransition('BeginInlineExp', 'inlineExpression', true)
            .addTransition('ShortcutOption', 'shortcutOption')
            .addTextRule('Text'),
        shortcutOption: new lexer_state_1.default()
            .setTrackNextIndentation(true)
            .addTransition('EscapedCharacter', null, true)
            .addTransition('Comment', null, true)
            .addTransition('Hashtag', null, true)
            .addTransition('BeginCommand', 'expression', true)
            .addTransition('BeginInlineExp', 'inlineExpressionInShortcut', true)
            .addTextRule('Text', 'base'),
        command: new lexer_state_1.default()
            .addTransition('If', 'expression')
            .addTransition('Else')
            .addTransition('ElseIf', 'expression')
            .addTransition('EndIf')
            .addTransition('Set', 'assignment')
            .addTransition('Declare', 'declare')
            .addTransition('Jump', 'jump')
            .addTransition('Stop', 'stop')
            .addTransition('BeginInlineExp', 'inlineExpressionInCommand', true)
            .addTransition('EndCommand', 'base', true)
            .addTextRule('Text'),
        commandArg: new lexer_state_1.default().addTextRule('Text'),
        commandParenArgOrExpression: new lexer_state_1.default()
            .addTransition('EndCommand', 'base', true)
            .addTransition('LeftParen', 'expression')
            .addTransition('Variable', 'expression')
            .addTransition('Number', 'expression')
            .addTransition('String')
            .addTransition('True')
            .addTransition('False')
            .addTransition('Null')
            .addTransition('RightParen'),
        assignment: new lexer_state_1.default().addTransition('Variable').addTransition('EqualToOrAssign', 'expression'),
        declare: new lexer_state_1.default()
            .addTransition('Variable')
            .addTransition('EndCommand', 'base')
            .addTransition('EqualToOrAssign', 'expression'),
        jump: new lexer_state_1.default()
            .addTransition('Identifier')
            .addTransition('BeginInlineExp', 'inlineExpressionInCommand', true)
            .addTransition('EndCommand', 'base', true),
        stop: new lexer_state_1.default().addTransition('EndCommand', 'base', true),
        expression: new lexer_state_1.default()
            .addTransition('As')
            .addTransition('ExplicitType')
            .addTransition('EndCommand', 'base')
            .addTransition('Number')
            .addTransition('String')
            .addTransition('LeftParen')
            .addTransition('RightParen')
            .addTransition('EqualTo')
            .addTransition('EqualToOrAssign')
            .addTransition('NotEqualTo')
            .addTransition('GreaterThanOrEqualTo')
            .addTransition('GreaterThan')
            .addTransition('LessThanOrEqualTo')
            .addTransition('LessThan')
            .addTransition('Add')
            .addTransition('UnaryMinus')
            .addTransition('Minus')
            .addTransition('Exponent')
            .addTransition('Multiply')
            .addTransition('Divide')
            .addTransition('Modulo')
            .addTransition('And')
            .addTransition('Or')
            .addTransition('Xor')
            .addTransition('Not')
            .addTransition('Variable')
            .addTransition('Comma')
            .addTransition('True')
            .addTransition('False')
            .addTransition('Null')
            .addTransition('Identifier')
            .addTextRule(),
        inlineExpression: new lexer_state_1.default()
            .addTransition('EndInlineExp', 'base')
            .addTransition('Number')
            .addTransition('String')
            .addTransition('LeftParen')
            .addTransition('RightParen')
            .addTransition('EqualTo')
            .addTransition('EqualToOrAssign')
            .addTransition('NotEqualTo')
            .addTransition('GreaterThanOrEqualTo')
            .addTransition('GreaterThan')
            .addTransition('LessThanOrEqualTo')
            .addTransition('LessThan')
            .addTransition('Add')
            .addTransition('UnaryMinus')
            .addTransition('Minus')
            .addTransition('Exponent')
            .addTransition('Multiply')
            .addTransition('Divide')
            .addTransition('Modulo')
            .addTransition('And')
            .addTransition('Or')
            .addTransition('Xor')
            .addTransition('Not')
            .addTransition('Variable')
            .addTransition('Comma')
            .addTransition('True')
            .addTransition('False')
            .addTransition('Null')
            .addTransition('Identifier')
            .addTextRule('Text', 'base'),
        // TODO: Copied from above
        // There has to be a non-stupid way to do this, right?
        // I'm just not familiar enough yet to know how to
        // transition from inline expression back to base OR command
        // states depending on how we got there
        inlineExpressionInCommand: new lexer_state_1.default()
            .addTransition('EndInlineExp', 'command')
            .addTransition('Number')
            .addTransition('String')
            .addTransition('LeftParen')
            .addTransition('RightParen')
            .addTransition('EqualTo')
            .addTransition('EqualToOrAssign')
            .addTransition('NotEqualTo')
            .addTransition('GreaterThanOrEqualTo')
            .addTransition('GreaterThan')
            .addTransition('LessThanOrEqualTo')
            .addTransition('LessThan')
            .addTransition('Add')
            .addTransition('UnaryMinus')
            .addTransition('Minus')
            .addTransition('Exponent')
            .addTransition('Multiply')
            .addTransition('Divide')
            .addTransition('Modulo')
            .addTransition('And')
            .addTransition('Or')
            .addTransition('Xor')
            .addTransition('Not')
            .addTransition('Variable')
            .addTransition('Comma')
            .addTransition('True')
            .addTransition('False')
            .addTransition('Null')
            .addTransition('Identifier')
            .addTextRule('Text', 'base'),
        inlineExpressionInShortcut: new lexer_state_1.default()
            .addTransition('EndInlineExp', 'shortcutOption')
            .addTransition('Number')
            .addTransition('String')
            .addTransition('LeftParen')
            .addTransition('RightParen')
            .addTransition('EqualTo')
            .addTransition('EqualToOrAssign')
            .addTransition('NotEqualTo')
            .addTransition('GreaterThanOrEqualTo')
            .addTransition('GreaterThan')
            .addTransition('LessThanOrEqualTo')
            .addTransition('LessThan')
            .addTransition('Add')
            .addTransition('UnaryMinus')
            .addTransition('Minus')
            .addTransition('Exponent')
            .addTransition('Multiply')
            .addTransition('Divide')
            .addTransition('Modulo')
            .addTransition('And')
            .addTransition('Or')
            .addTransition('Xor')
            .addTransition('Not')
            .addTransition('Variable')
            .addTransition('Comma')
            .addTransition('True')
            .addTransition('False')
            .addTransition('Null')
            .addTransition('Identifier')
            .addTextRule('Text', 'base'),
    };
}
exports.default = {
    makeStates: makeStates,
};
//# sourceMappingURL=data:application/json;base64,