declare var parser: {
    trace: () => void;
    yy: {};
    symbols_: {
        error: number;
        node: number;
        statements: number;
        EndOfInput: number;
        conditionalBlock: number;
        statement: number;
        text: number;
        shortcut: number;
        genericCommand: number;
        assignmentCommand: number;
        jumpCommand: number;
        stopCommand: number;
        Comment: number;
        hashtags: number;
        EndOfLine: number;
        textNode: number;
        Text: number;
        EscapedCharacter: number;
        inlineExpression: number;
        Hashtag: number;
        conditional: number;
        BeginCommand: number;
        If: number;
        expression: number;
        EndCommand: number;
        EndIf: number;
        additionalConditionalBlocks: number;
        else: number;
        Else: number;
        elseif: number;
        ElseIf: number;
        shortcutOption: number;
        ShortcutOption: number;
        Indent: number;
        Dedent: number;
        Jump: number;
        Identifier: number;
        Stop: number;
        setCommandInner: number;
        declareCommandInner: number;
        Set: number;
        Variable: number;
        EqualToOrAssign: number;
        Declare: number;
        As: number;
        ExplicitType: number;
        functionArgument: number;
        functionCall: number;
        LeftParen: number;
        RightParen: number;
        UnaryMinus: number;
        Add: number;
        Minus: number;
        Exponent: number;
        Multiply: number;
        Divide: number;
        Modulo: number;
        Not: number;
        Or: number;
        And: number;
        Xor: number;
        EqualTo: number;
        NotEqualTo: number;
        GreaterThan: number;
        GreaterThanOrEqualTo: number;
        LessThan: number;
        LessThanOrEqualTo: number;
        parenExpressionArgs: number;
        Comma: number;
        literal: number;
        True: number;
        False: number;
        Number: number;
        String: number;
        Null: number;
        BeginInlineExp: number;
        EndInlineExp: number;
        $accept: number;
        $end: number;
    };
    terminals_: {
        2: string;
        5: string;
        14: string;
        16: string;
        18: string;
        19: string;
        21: string;
        23: string;
        24: string;
        26: string;
        27: string;
        30: string;
        32: string;
        34: string;
        35: string;
        36: string;
        37: string;
        38: string;
        39: string;
        42: string;
        43: string;
        44: string;
        45: string;
        46: string;
        47: string;
        50: string;
        51: string;
        52: string;
        53: string;
        54: string;
        55: string;
        56: string;
        57: string;
        58: string;
        59: string;
        60: string;
        61: string;
        62: string;
        63: string;
        64: string;
        65: string;
        66: string;
        67: string;
        68: string;
        70: string;
        72: string;
        73: string;
        74: string;
        75: string;
        76: string;
        77: string;
        78: string;
    };
    productions_: (number | number[])[];
    performAction: (yytext: any, yyleng: any, yylineno: any, yy: any, yystate: any, $$: any, _$: any) => any;
    table: any[];
    defaultActions: {
        20: number[];
        144: number[];
    };
    parseError: (str: any, hash: any) => void;
    parse: (input: any) => any;
};
declare function Parser(): void;
declare namespace Parser {
    var prototype: {
        trace: () => void;
        yy: {};
        symbols_: {
            error: number;
            node: number;
            statements: number;
            EndOfInput: number;
            conditionalBlock: number;
            statement: number;
            text: number;
            shortcut: number;
            genericCommand: number;
            assignmentCommand: number;
            jumpCommand: number;
            stopCommand: number;
            Comment: number;
            hashtags: number;
            EndOfLine: number;
            textNode: number;
            Text: number;
            EscapedCharacter: number;
            inlineExpression: number;
            Hashtag: number;
            conditional: number;
            BeginCommand: number;
            If: number;
            expression: number;
            EndCommand: number;
            EndIf: number;
            additionalConditionalBlocks: number;
            else: number;
            Else: number;
            elseif: number;
            ElseIf: number;
            shortcutOption: number;
            ShortcutOption: number;
            Indent: number;
            Dedent: number;
            Jump: number;
            Identifier: number;
            Stop: number;
            setCommandInner: number;
            declareCommandInner: number;
            Set: number;
            Variable: number;
            EqualToOrAssign: number;
            Declare: number;
            As: number;
            ExplicitType: number;
            functionArgument: number;
            functionCall: number;
            LeftParen: number;
            RightParen: number;
            UnaryMinus: number;
            Add: number;
            Minus: number;
            Exponent: number;
            Multiply: number;
            Divide: number;
            Modulo: number;
            Not: number;
            Or: number;
            And: number;
            Xor: number;
            EqualTo: number;
            NotEqualTo: number;
            GreaterThan: number;
            GreaterThanOrEqualTo: number;
            LessThan: number;
            LessThanOrEqualTo: number;
            parenExpressionArgs: number;
            Comma: number;
            literal: number;
            True: number;
            False: number;
            Number: number;
            String: number;
            Null: number;
            BeginInlineExp: number;
            EndInlineExp: number;
            $accept: number;
            $end: number;
        };
        terminals_: {
            2: string;
            5: string;
            14: string;
            16: string;
            18: string;
            19: string;
            21: string;
            23: string;
            24: string;
            26: string;
            27: string;
            30: string;
            32: string;
            34: string;
            35: string;
            36: string;
            37: string;
            38: string;
            39: string;
            42: string;
            43: string;
            44: string;
            45: string;
            46: string;
            47: string;
            50: string;
            51: string;
            52: string;
            53: string;
            54: string;
            55: string;
            56: string;
            57: string;
            58: string;
            59: string;
            60: string;
            61: string;
            62: string;
            63: string;
            64: string;
            65: string;
            66: string;
            67: string;
            68: string;
            70: string;
            72: string;
            73: string;
            74: string;
            75: string;
            76: string;
            77: string;
            78: string;
        };
        productions_: (number | number[])[];
        performAction: (yytext: any, yyleng: any, yylineno: any, yy: any, yystate: any, $$: any, _$: any) => any;
        table: any[];
        defaultActions: {
            20: number[];
            144: number[];
        };
        parseError: (str: any, hash: any) => void;
        parse: (input: any) => any;
    };
}
export { parser, Parser };
